name: Tests

on:
  push:
    branches: [ master, dev ]
    paths-ignore:
    - 'docs/**'
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: ["3.10"]
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
    - name: Cache conda packages
      uses: actions/cache@v2
      env:
        # Increase this value to reset cache
        CACHE_NUMBER: 0
      with:
        path: ~/conda_pkgs_dir
        key: ${{ runner.os }}-${{ env.CACHE_NUMBER }}
    - name: Set up Python ${{ matrix.python-version }} (Miniconda)
      uses: conda-incubator/setup-miniconda@v2
      with:
        miniforge-variant: Mambaforge
        miniforge-version: latest
        mamba-version: "*"
        channel-priority: strict
        channels: conda-forge
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}
    - name: Conda info
      shell: bash -l {0}
      run: |
        mamba info
        mamba list
        mamba config --show-sources
        mamba config --show
    - name: Install build dependencies
      shell: bash -l {0}
      run: |
        mamba install -q -n base conda-build conda-verify
        mamba install -q anaconda-client libarchive
        mamba install -q pip pyside6 rdkit-dev eigen cxx-compiler versioneer cmake-build-extension cmake python==${{ matrix.python-version }}
    - name: Install libiconv
      shell: bash -l {0}
      run: mamba install -n base libiconv
      if: runner.os == 'Linux'
    - name: Build
      shell: bash -l {0}
      run: |
        export PREFIX=$(python -c "import sys; print(sys.prefix)")
        export QMN_VERSION=$(python -c "import versioneer; print(versioneer.get_version())")
        mkdir build
        pushd build
        cmake ${CMAKE_ARGS} -DCMAKE_PREFIX_PATH=${PREFIX} -DCMAKE_INSTALL_PREFIX=${PREFIX} -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_RPATH=${PREFIX}/lib -DBUILD_STATIC=OFF -DQMN_VERSION=${PKG_VERSION} ..
        make install
        popd
        pip install . -vv
    - name: Install test dependencies
      shell: bash -l {0}
      run: mamba install -q tinycss2 pytest pylint pytest-pylint toml pytest-qt pytest-cov codecov pytest-mock
    - name: Install xvfb
      shell: bash -l {0}
      run: mamba install pytest-xvfb
      if: runner.os == 'Linux'
    - name: Test with pytest
      shell: bash -l {0}
      run: cd tests && pytest --cov=PySide6MolecularNetwork --cov-report=xml .
    - name: Upload coverage
      if: success()
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        name: ${{ runner.os }} Python ${{ matrix.python-version }}
