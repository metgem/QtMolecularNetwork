# Copyright (C) 2022 The Qt Company Ltd.
# SPDX-License-Identifier: LicenseRef-Qt-Commercial OR LGPL-3.0-only OR GPL-2.0-only OR GPL-3.0-only
from __future__ import annotations

"""
This file contains the exact signatures for all functions in module
qmn, except for defaults which are replaced by "...".
"""

# Module `qmn`

import qmn
import PySide6.QtCore
import PySide6.QtGui
import PySide6.QtWidgets

import enum
from typing import Any, ClassVar, Dict, List, Optional, Sequence, Set, Union, overload
from PySide6.QtCore import Signal
from shiboken6 import Shiboken


NoneType = type(None)


class Config(enum.IntEnum):

    Radius                   : Config = ... # 0x1e


class DefaultStyle(qmn.NetworkStyle):

    def __init__(self) -> None: ...


class Edge(PySide6.QtWidgets.QGraphicsPathItem):

    def __init__(self, index: int, sourceNode: qmn.Node, destNode: qmn.Node, width: float = ...) -> None: ...

    def adjust(self) -> None: ...
    def boundingRect(self) -> PySide6.QtCore.QRectF: ...
    def destNode(self) -> qmn.Node: ...
    def index(self) -> int: ...
    def isSelfLoop(self) -> bool: ...
    def itemChange(self, change: PySide6.QtWidgets.QGraphicsItem.GraphicsItemChange, value: Any) -> Any: ...
    def paint(self, painter: PySide6.QtGui.QPainter, option: PySide6.QtWidgets.QStyleOptionGraphicsItem, widget: PySide6.QtWidgets.QWidget) -> None: ...
    def setDestNode(self, node: qmn.Node) -> None: ...
    def setPen(self, pen: Union[PySide6.QtGui.QPen, PySide6.QtCore.Qt.PenStyle, PySide6.QtGui.QColor]) -> None: ...
    def setSourceNode(self, node: qmn.Node) -> None: ...
    def setWidth(self, width: float) -> None: ...
    def sourceNode(self) -> qmn.Node: ...
    def type(self) -> int: ...
    def updateStyle(self, style: qmn.NetworkStyle, old: Optional[qmn.NetworkStyle] = ...) -> None: ...
    def width(self) -> float: ...


class GraphicsItemLayer(PySide6.QtWidgets.QGraphicsItem):

    def __init__(self) -> None: ...

    def boundingRect(self) -> PySide6.QtCore.QRectF: ...
    def paint(self, arg__1: PySide6.QtGui.QPainter, arg__2: PySide6.QtWidgets.QStyleOptionGraphicsItem, arg__3: PySide6.QtWidgets.QWidget) -> None: ...


class NetworkScene(PySide6.QtWidgets.QGraphicsScene):

    itemsVisibilityChanged   : ClassVar[Signal] = ... # itemsVisibilityChanged()
    layoutChanged            : ClassVar[Signal] = ... # layoutChanged()
    locked                   : ClassVar[Signal] = ... # locked(bool)
    pieChartsVisibilityChanged: ClassVar[Signal] = ... # pieChartsVisibilityChanged(bool)
    pixmapVisibilityChanged  : ClassVar[Signal] = ... # pixmapVisibilityChanged(bool)
    scaleChanged             : ClassVar[Signal] = ... # scaleChanged(double)

    class Type(enum.IntEnum):

        PixmapsAuto              : NetworkScene.Type = ... # -0x1
        PixmapsSmiles            : NetworkScene.Type = ... # 0x0
        PixmapsInchi             : NetworkScene.Type = ... # 0x1
        PixmapsBase64            : NetworkScene.Type = ... # 0x2
        PixmapsSvg               : NetworkScene.Type = ... # 0x3


    def __init__(self, parent: Optional[PySide6.QtWidgets.QWidget] = ...) -> None: ...

    def addEdge(self, edge: qmn.Edge) -> None: ...
    def addEdges(self, edges: Sequence[qmn.Edge]) -> None: ...
    def addNode(self, node: qmn.Node) -> None: ...
    def addNodes(self, nodes: Sequence[qmn.Node]) -> None: ...
    def clear(self) -> None: ...
    def createEdges(self, indexes: Sequence[int], sourceNodes: Sequence[qmn.Node], destNodes: Sequence[qmn.Node], widths: Sequence[float]) -> List[qmn.Edge]: ...
    def createNodes(self, indexes: Sequence[int], labels: Sequence[str] = ..., positions: Sequence[PySide6.QtCore.QPointF] = ..., colors: Sequence[Any] = ..., radii: Sequence[Any] = ...) -> List[qmn.Node]: ...
    def edges(self) -> List[qmn.Edge]: ...
    def hideAllItems(self) -> None: ...
    def hideItems(self, items: Sequence[PySide6.QtWidgets.QGraphicsItem]) -> None: ...
    def hideSelectedItems(self) -> None: ...
    def isLocked(self) -> bool: ...
    def lock(self, lock: bool = ...) -> None: ...
    def networkStyle(self) -> qmn.NetworkStyle: ...
    def nodes(self) -> List[qmn.Node]: ...
    def nodesColors(self) -> List[PySide6.QtGui.QColor]: ...
    def nodesOverlayBrushes(self) -> List[PySide6.QtGui.QBrush]: ...
    def nodesPolygons(self) -> List[int]: ...
    def nodesRadii(self) -> List[int]: ...
    def pieChartsVisibility(self) -> bool: ...
    def pieColors(self) -> List[PySide6.QtGui.QColor]: ...
    def pixmapVisibility(self) -> bool: ...
    def removeAllEdges(self) -> None: ...
    def removeAllNodes(self) -> None: ...
    def removeEdges(self, edges: Sequence[qmn.Edge]) -> None: ...
    def removeNodes(self, nodes: Sequence[qmn.Node]) -> None: ...
    def render(self, painter: PySide6.QtGui.QPainter, target: Union[PySide6.QtCore.QRectF, PySide6.QtCore.QRect] = ..., source: Union[PySide6.QtCore.QRectF, PySide6.QtCore.QRect] = ..., aspectRatioMode: PySide6.QtCore.Qt.AspectRatioMode = ...) -> None: ...
    def resetLabels(self) -> None: ...
    def resetNodesRadii(self) -> None: ...
    def resetPieCharts(self) -> None: ...
    def resetPixmaps(self) -> None: ...
    def scale(self) -> float: ...
    def selectedEdges(self) -> List[qmn.Edge]: ...
    def selectedNodes(self) -> List[qmn.Node]: ...
    def selectedNodesBoundingRect(self) -> PySide6.QtCore.QRectF: ...
    @overload
    def setEdgesSelection(self, edges: Sequence[qmn.Edge]) -> None: ...
    @overload
    def setEdgesSelection(self, indexes: Sequence[int]) -> None: ...
    def setLabels(self, labels: Sequence[str]) -> None: ...
    def setLabelsFromModel(self, model: PySide6.QtCore.QAbstractItemModel, column_id: int, role: int = ...) -> None: ...
    @overload
    def setLayout(self, layout: Sequence[PySide6.QtCore.QPointF], scale: float = ..., isolated_nodes: Sequence[int] = ...) -> None: ...
    @overload
    def setLayout(self, layout: Sequence[float], scale: float = ..., isolated_nodes: Sequence[int] = ...) -> None: ...
    def setNetworkStyle(self, style: Optional[qmn.NetworkStyle] = ...) -> None: ...
    def setNodesColors(self, colors: Sequence[Any]) -> None: ...
    def setNodesOverlayBrushes(self, brushes: Sequence[Any]) -> None: ...
    def setNodesPolygons(self, polygons: Sequence[int]) -> None: ...
    def setNodesRadii(self, radii: Sequence[int]) -> None: ...
    @overload
    def setNodesRadiiFromModel(self, model: PySide6.QtCore.QAbstractItemModel, column_id: int, func: object, role: int) -> None: ...
    @overload
    def setNodesRadiiFromModel(self, model: PySide6.QtCore.QAbstractItemModel, column_id: int, role: int = ...) -> None: ...
    @overload
    def setNodesSelection(self, indexes: Sequence[int]) -> None: ...
    @overload
    def setNodesSelection(self, nodes: Sequence[qmn.Node]) -> None: ...
    def setPieChartsFromModel(self, model: PySide6.QtCore.QAbstractItemModel, column_ids: Sequence[int], role: int = ...) -> None: ...
    def setPieChartsVisibility(self, visibility: bool = ...) -> None: ...
    def setPieColors(self, colors: Sequence[PySide6.QtGui.QColor]) -> None: ...
    def setPixmapVisibility(self, visibility: bool = ...) -> None: ...
    def setPixmapsFromModel(self, model: PySide6.QtCore.QAbstractItemModel, column_id: int, role: int = ..., type: int = ...) -> None: ...
    def setScale(self, scale: float = ...) -> None: ...
    def setSelectedNodesColor(self, color: Union[PySide6.QtGui.QColor, str, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, int]) -> None: ...
    def setSelectedNodesOverlayBrush(self, brush: Union[PySide6.QtGui.QBrush, PySide6.QtCore.Qt.BrushStyle, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor, PySide6.QtGui.QGradient, PySide6.QtGui.QImage, PySide6.QtGui.QPixmap]) -> None: ...
    def setSelectedNodesPolygon(self, polygon: int) -> None: ...
    def setSelectedNodesRadius(self, radius: int) -> None: ...
    def showAllItems(self) -> None: ...
    def showItems(self, items: Sequence[PySide6.QtWidgets.QGraphicsItem]) -> None: ...
    def unlock(self) -> None: ...
    def visibleNodesBoundingRect(self) -> PySide6.QtCore.QRectF: ...


class NetworkStyle(Shiboken.Object):

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, name: str, node: Dict[str, Any], edge: Dict[str, Any], scene: Dict[str, PySide6.QtGui.QBrush]) -> None: ...

    def backgroundBrush(self) -> PySide6.QtGui.QBrush: ...
    def edgePen(self, selected: bool = ...) -> PySide6.QtGui.QPen: ...
    def nodeBrush(self, selected: bool = ...) -> PySide6.QtGui.QBrush: ...
    def nodeFont(self, selected: bool = ...) -> PySide6.QtGui.QFont: ...
    def nodePen(self, selected: bool = ...) -> PySide6.QtGui.QPen: ...
    def nodeTextColor(self, selected: bool = ...) -> PySide6.QtGui.QColor: ...
    def setBackgroundBrush(self, brush: Union[PySide6.QtGui.QBrush, PySide6.QtCore.Qt.BrushStyle, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor, PySide6.QtGui.QGradient, PySide6.QtGui.QImage, PySide6.QtGui.QPixmap]) -> None: ...
    def setEdgePen(self, pen: Union[PySide6.QtGui.QPen, PySide6.QtCore.Qt.PenStyle, PySide6.QtGui.QColor], selected: bool = ...) -> None: ...
    def setNodeBrush(self, brush: Union[PySide6.QtGui.QBrush, PySide6.QtCore.Qt.BrushStyle, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor, PySide6.QtGui.QGradient, PySide6.QtGui.QImage, PySide6.QtGui.QPixmap], selected: bool = ...) -> None: ...
    def setNodeFont(self, font: Union[PySide6.QtGui.QFont, str, Sequence[str]], selected: bool = ...) -> None: ...
    def setNodePen(self, pen: Union[PySide6.QtGui.QPen, PySide6.QtCore.Qt.PenStyle, PySide6.QtGui.QColor], selected: bool = ...) -> None: ...
    def setNodeTextColor(self, color: Union[PySide6.QtGui.QColor, str, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, int], selected: bool = ...) -> None: ...
    def setStyleName(self, name: str) -> None: ...
    def styleName(self) -> str: ...


class Node(PySide6.QtWidgets.QGraphicsEllipseItem):

    def __init__(self, index: int, label: str = ...) -> None: ...

    def addEdge(self, edge: qmn.Edge) -> None: ...
    def customPolygon(self) -> PySide6.QtGui.QPolygonF: ...
    def edges(self) -> Set[qmn.Edge]: ...
    def font(self) -> PySide6.QtGui.QFont: ...
    def index(self) -> int: ...
    def invalidateShape(self) -> None: ...
    def itemChange(self, change: PySide6.QtWidgets.QGraphicsItem.GraphicsItemChange, value: Any) -> Any: ...
    def label(self) -> str: ...
    def mousePressEvent(self, event: PySide6.QtWidgets.QGraphicsSceneMouseEvent) -> None: ...
    def mouseReleaseEvent(self, event: PySide6.QtWidgets.QGraphicsSceneMouseEvent) -> None: ...
    def overlayBrush(self) -> PySide6.QtGui.QBrush: ...
    def paint(self, painter: PySide6.QtGui.QPainter, option: PySide6.QtWidgets.QStyleOptionGraphicsItem, widget: PySide6.QtWidgets.QWidget) -> None: ...
    def pie(self) -> List[float]: ...
    def pixmap(self) -> PySide6.QtGui.QPixmap: ...
    def polygon(self) -> qmn.NodePolygon: ...
    def radius(self) -> int: ...
    def removeEdge(self, edge: qmn.Edge) -> None: ...
    def scalePolygon(self) -> None: ...
    def setBrush(self, brush: Union[PySide6.QtGui.QBrush, PySide6.QtCore.Qt.BrushStyle, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor, PySide6.QtGui.QGradient, PySide6.QtGui.QImage, PySide6.QtGui.QPixmap], autoTextColor: bool = ...) -> None: ...
    def setCustomPolygon(self, polygon: Union[PySide6.QtGui.QPolygonF, Sequence[PySide6.QtCore.QPointF], PySide6.QtGui.QPolygon, PySide6.QtCore.QRectF]) -> None: ...
    def setFont(self, font: Union[PySide6.QtGui.QFont, str, Sequence[str]]) -> None: ...
    def setLabel(self, label: str) -> None: ...
    def setOverlayBrush(self, brush: Union[PySide6.QtGui.QBrush, PySide6.QtCore.Qt.BrushStyle, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor, PySide6.QtGui.QGradient, PySide6.QtGui.QImage, PySide6.QtGui.QPixmap]) -> None: ...
    def setPie(self, values: Sequence[float]) -> None: ...
    def setPixmap(self, pixmap: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage, str]) -> None: ...
    def setPixmapFromBase64(self, b64: Union[PySide6.QtCore.QByteArray, bytes, bytearray, memoryview]) -> None: ...
    def setPixmapFromInchi(self, inchi: str, size: PySide6.QtCore.QSize = ...) -> None: ...
    def setPixmapFromSmiles(self, smiles: str, size: PySide6.QtCore.QSize = ...) -> None: ...
    def setPixmapFromSvg(self, svg: Union[PySide6.QtCore.QByteArray, bytes, bytearray, memoryview], size: PySide6.QtCore.QSize = ...) -> None: ...
    @overload
    def setPolygon(self, id: int) -> None: ...
    @overload
    def setPolygon(self, polygon_id: qmn.NodePolygon) -> None: ...
    def setRadius(self, radius: int) -> None: ...
    def setTextColor(self, color: Union[PySide6.QtGui.QColor, str, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, int]) -> None: ...
    def shape(self) -> PySide6.QtGui.QPainterPath: ...
    def textColor(self) -> PySide6.QtGui.QColor: ...
    def type(self) -> int: ...
    def updateLabelRect(self) -> None: ...
    def updateStyle(self, style: qmn.NetworkStyle, old: Optional[qmn.NetworkStyle] = ...) -> None: ...


class NodePolygon(enum.IntEnum):

    Custom                   : NodePolygon = ... # -0x1
    Circle                   : NodePolygon = ... # 0x0
    Square                   : NodePolygon = ... # 0x1
    Diamond                  : NodePolygon = ... # 0x2
    ThinDiamond              : NodePolygon = ... # 0x3
    TriangleDown             : NodePolygon = ... # 0x4
    TriangleUp               : NodePolygon = ... # 0x5
    TriangleLeft             : NodePolygon = ... # 0x6
    TriangleRight            : NodePolygon = ... # 0x7
    Pentagon                 : NodePolygon = ... # 0x8
    Octagon                  : NodePolygon = ... # 0x9
    Hexagon                  : NodePolygon = ... # 0xa
    Star                     : NodePolygon = ... # 0xb
    Hexagram                 : NodePolygon = ... # 0xc
    Octagram                 : NodePolygon = ... # 0xd
    Decagram                 : NodePolygon = ... # 0xe
    Plus                     : NodePolygon = ... # 0xf
    X                        : NodePolygon = ... # 0x10
    Mask                     : NodePolygon = ... # 0x11
    Heart                    : NodePolygon = ... # 0x12
    Spade                    : NodePolygon = ... # 0x13
    Club                     : NodePolygon = ... # 0x14


class QIntList(object): ...


class QPointFList(object): ...


# eof
