cmake_minimum_required(VERSION 3.16)
cmake_policy(VERSION 3.16)

# Enable policy to run automoc on generated files.
if(POLICY CMP0071)
  cmake_policy(SET CMP0071 NEW)
endif()

set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_SOURCE_DIR}/../cmake/modules ${CMAKE_MODULE_PATH})
find_package(Cairo REQUIRED)

include(FindFreetype)
include_directories(${FREETYPE_INCLUDE_DIRS})

# ================================ General configuration ======================================

project(PySide6QtMolecularNetwork)

# Find Python
find_package (Python3 COMPONENTS Interpreter Development)
if(NOT Python3_Interpreter_FOUND)
    message(FATAL_ERROR "Python3 not found")
endif()
message(STATUS "Using python: ${Python3_EXECUTABLE}")

# https://bugreports.qt.io/browse/QTBUG-89754
set(OpenGL_GL_PREFERENCE "LEGACY")

# Find the required Qt packages
find_package(Qt6 REQUIRED COMPONENTS Core Gui Widgets Svg)
find_package(Shiboken6 6.0.0 REQUIRED)
find_package(PySide6 6.0.0 REQUIRED)
find_package(RDKit REQUIRED)
find_package(qt6molecularnetwork)

# Set CPP standard to C++17 minimum.
set(CMAKE_CXX_STANDARD 17)

# The C++ project library for which we will create bindings.
set(sample_library "qt6molecularnetwork")

# The name of the generated bindings module (as imported in Python).
set(bindings_library "qmn")

# The header file with all the types and functions for which bindings will be generated.
# Usually it simply includes other headers of the library you are creating bindings for.
set(wrapped_header ${CMAKE_SOURCE_DIR}/bindings.h)

# The typesystem xml file which defines the relationships between the C++ types / functions
# and the corresponding Python equivalents.
set(typesystem_file ${CMAKE_SOURCE_DIR}/bindings.xml)

# Specify which C++ files will be generated by shiboken. This includes the module wrapper
# and a '.cpp' file per C++ type. These are needed for generating the module shared
# library.
set(generated_sources   
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/edge_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/graphicsitemlayer_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/networkscene_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/networkstyle_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/defaultstyle_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/node_wrapper.cpp
    ${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_module_wrapper.cpp
    #${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}/${bindings_library}_python.h
    )


# ================================== Shiboken detection ======================================

# Query for the shiboken generator path, Python path, include paths and linker flags.
get_property(shiboken_include_dir TARGET Shiboken6::libshiboken PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
get_property(shiboken_shared_libraries TARGET Shiboken6::libshiboken PROPERTY IMPORTED_IMPLIB_RELEASE)
get_property(pyside_include_dir TARGET PySide6::pyside6 PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
get_property(pyside_shared_libraries TARGET PySide6::pyside6 PROPERTY IMPORTED_IMPLIB_RELEASE)
get_property(qmn_include_dir TARGET qmn::qt6molecularnetwork PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
get_property(qmn_link_libraries TARGET qmn::qt6molecularnetwork PROPERTY INTERFACE_LINK_LIBRARIES)
get_property(qmn_shared_libraries TARGET qmn::qt6molecularnetwork PROPERTY IMPORTED_IMPLIB_RELEASE)

find_program(shiboken_path "shiboken6${CMAKE_EXECUTABLE_SUFFIX}")
if(NOT EXISTS ${shiboken_path})
    message(FATAL_ERROR "Shiboken executable not found at path: ${shiboken_path}")
endif()


# ==================================== RPATH configuration ====================================

if(UNIX AND NOT APPLE)
    set(CMAKE_INSTALL_RPATH "$ORIGIN/lib:$ORIGIN/../PySide6/:$ORIGIN/../PySide6/Qt/lib:$ORIGIN/../shiboken6")
endif()

if(APPLE)
    set(CMAKE_INSTALL_RPATH "@loader_path/lib;@loader_path/../PySide6/;@loader_path/../PySide6/Qt/lib;@loader_path/../shiboken6")
    set(MACOSX_RPATH TRUE)
endif()


# ============================== Qt Includes for project_library ==============================

# Get the relevant Qt include dirs, to pass them on to shiboken.
set(QT_INCLUDE_DIR "")
get_target_property(QT_INCLUDE_DIR_LIST Qt6::Core INTERFACE_INCLUDE_DIRECTORIES)
foreach(_Q ${QT_INCLUDE_DIR_LIST})
    if(NOT "${_Q}" MATCHES "QtCore$")
        set(QT_INCLUDE_DIR "${_Q}")
    endif()
endforeach()
if(QT_INCLUDE_DIR STREQUAL "")
    message(FATAL_ERROR "Unable to obtain the Qt include directory")
endif()

set(QT_INCLUDES "")
list(APPEND QT_INCLUDES "-I${QT_INCLUDE_DIR}")

get_property(QT_CORE_INCLUDE_DIRS TARGET Qt6::Core PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
foreach(INCLUDE_DIR ${QT_CORE_INCLUDE_DIRS})
    list(APPEND QT_INCLUDES "-I${INCLUDE_DIR}")
endforeach()

get_property(QT_GUI_INCLUDE_DIRS TARGET Qt6::Gui PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
foreach(INCLUDE_DIR ${QT_GUI_INCLUDE_DIRS})
    list(APPEND QT_INCLUDES "-I${INCLUDE_DIR}")
endforeach()

get_property(QT_WIDGETS_INCLUDE_DIRS TARGET Qt6::Widgets PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
foreach(INCLUDE_DIR ${QT_WIDGETS_INCLUDE_DIRS})
    list(APPEND QT_INCLUDES "-I${INCLUDE_DIR}")
endforeach()

get_property(QT_SVG_INCLUDE_DIRS TARGET Qt6::Svg PROPERTY INTERFACE_INCLUDE_DIRECTORIES)
foreach(INCLUDE_DIR ${QT_SVG_INCLUDE_DIRS})
    list(APPEND QT_INCLUDES "-I${INCLUDE_DIR}")
endforeach()

# Check if Qt is a framework build on macOS. This affects how include paths should be handled.
get_target_property(QtCore_is_framework Qt6::Core FRAMEWORK)
if (QtCore_is_framework)
    # Get the path to the Qt framework dir.
    set(QT_FRAMEWORK_INCLUDE_DIR "${QT6_INSTALL_PREFIX}/${QT6_INSTALL_LIBS}")
    message(STATUS "*** QT_FRAMEWORK_INCLUDE_DIR is ${QT_FRAMEWORK_INCLUDE_DIR}")
    list(APPEND QT_INCLUDES "--framework-include-paths=${QT_FRAMEWORK_INCLUDE_DIR}")
endif()

# We need to include the headers for the module bindings that we use
set(pyside_additional_includes "")
foreach(INCLUDE_DIR ${pyside_include_dir})
    list(APPEND pyside_additional_includes "${INCLUDE_DIR}/QtCore")
    list(APPEND pyside_additional_includes "${INCLUDE_DIR}/QtGui")
    list(APPEND pyside_additional_includes "${INCLUDE_DIR}/QtWidgets")
endforeach()


# ====================== Shiboken target for generating binding C++ files  ====================

set(implicit_includes)
foreach(_current ${CMAKE_CXX_IMPLICIT_INCLUDE_DIRECTORIES})
    set(implicit_includes ${implicit_includes} "-I${_current}")
endforeach()

set(qmn_includes)
foreach(_current ${qmn_include_dir})
    set(qmn_includes ${qmn_includes} "-I${_current}")
endforeach()

# Set up the options to pass to shiboken.
set(shiboken_options --generator-set=shiboken --enable-parent-ctor-heuristic
    --enable-return-value-heuristic --use-isnull-as-nb_nonzero
    --avoid-protected-hack --enable-pyside-extensions
    ${QT_INCLUDES}
    ${implicit_includes} ${qmn_includes}
    -I${CMAKE_CURRENT_SOURCE_DIR}/shiboken
    -T${PYSIDE_TYPESYSTEMS}
    --output-directory=${CMAKE_CURRENT_BINARY_DIR}
    )

set(generated_sources_dependencies ${wrapped_header} ${typesystem_file})

# Add custom target to run shiboken to generate the binding cpp files.add_custom_command(OUTPUT ${generated_sources}
add_custom_command(OUTPUT ${generated_sources}
                    COMMAND ${shiboken_path}
                    ${shiboken_options} ${wrapped_header} ${typesystem_file}
                    DEPENDS ${generated_sources_dependencies}
                    IMPLICIT_DEPENDS CXX ${wrapped_header}
                    WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
                    COMMENT "Running generator for ${typesystem_file}.")


# =============================== CMake target - bindings_library =============================

# Set the cpp files which will be used for the bindings library.
set(${bindings_library}_sources ${generated_sources})

# Define and build the bindings library.
add_library(${bindings_library} MODULE ${${bindings_library}_sources})

# Apply relevant include and link flags.
target_include_directories(${bindings_library} PRIVATE ${pyside_additional_includes})
target_include_directories(${bindings_library} PRIVATE ${pyside_include_dir})
target_include_directories(${bindings_library} PRIVATE ${Python3_INCLUDE_DIRS})
target_include_directories(${bindings_library} PRIVATE ${shiboken_include_dir})
target_include_directories(${bindings_library} PRIVATE "${CMAKE_SOURCE_DIR}/shiboken")

target_link_libraries(${bindings_library} PRIVATE Qt6::Widgets)
target_link_libraries(${bindings_library} PRIVATE ${pyside_shared_libraries})
target_link_libraries(${bindings_library} PRIVATE ${shiboken_shared_libraries})
target_link_libraries(${bindings_library} PRIVATE ${ads_link_libraries})
target_link_libraries(${bindings_library} PRIVATE ${ads_shared_libraries})
target_link_libraries(${bindings_library} PUBLIC qmn::qt6molecularnetwork)

if (UNIX)
    target_link_libraries(${bindings_library} PUBLIC PySide6::pyside6)
endif()

target_compile_definitions(${bindings_library} PRIVATE "-DPy_LIMITED_API=0x03070000")

# Adjust the name of generated module.
set_property(TARGET ${bindings_library} PROPERTY PREFIX "")
set_property(TARGET ${bindings_library} PROPERTY OUTPUT_NAME
             "${bindings_library}${PYTHON_EXTENSION_SUFFIX}")
if(WIN32)
    set_property(TARGET ${bindings_library} PROPERTY SUFFIX ".pyd")
endif()

# Make sure the linker doesn't complain about not finding Python symbols on macOS.
if(APPLE)
  set_target_properties(${bindings_library} PROPERTIES LINK_FLAGS "-undefined dynamic_lookup")
endif(APPLE)

if (WIN32)
    target_link_directories(${bindings_library} PRIVATE ${Python3_LIBRARY_DIRS})
endif()

# ===================================== CMake target - pyi ====================================

set(generate_pyi_options ${bindings_library} --sys-path
        "${CMAKE_CURRENT_BINARY_DIR}")

# Add target to generate pyi file, which depends on the module target.
add_custom_target("${bindings_library}_pyi" ALL
                  COMMAND ${CMAKE_COMMAND} -E env ${ld_prefix}
                  "${Python3_EXECUTABLE}"
                  "${CMAKE_CURRENT_SOURCE_DIR}/support/generate_pyi.py" ${generate_pyi_options}
                  BYPRODUCTS "${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}.pyi")
add_dependencies("${bindings_library}_pyi" ${bindings_library})


# ================================= Dubious deployment section ================================

install(TARGETS ${bindings_library}
        LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}
        RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}
        )


install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${bindings_library}.pyi"
        DESTINATION "${CMAKE_INSTALL_PREFIX}")